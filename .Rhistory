prophet.data <- data.frame(ds = df3$datetime_beginning_ept, y = df3$mw)
Prof <- prophet()
Prof <- add_country_holidays(Prof, "US")
Prof <- add_seasonality(Prof, name='monthly', period=30.5, fourier.order=6)
Prof <- fit.prophet(Prof, prophet.data)
forecast.data <- make_future_dataframe(Prof, periods = 168, freq = 'hour')
#plot(Prof, predict(Prof, forecast.data))
# Calculate prediction errors from forecast
Prophet.error <- validation - tail(predict(Prof, forecast.data)$yhat, 168)
# Calculate prediction error statistics (MAE and MAPE)
Prophet.MAE <- mean(abs(Prophet.error$mw))
Prophet.MAPE <- mean(abs(Prophet.error$mw)/abs(validation$mw))*100
Prophet.MAE
Prophet.MAPE
set.seed(476)
NN.Model <- nnetar(diff(training, 24), p = 1, P = 2)
set.seed(476)
NN.Model <- nnetar(diff(energy, 24), p = 1, P = 2)
NN.Forecast <- forecast::forecast(NN.Model, h = 168)
plot(NN.Forecast)
Pass.Forecast <- rep(NA, 168)
for(i in 1:168){
Pass.Forecast[i] <- energy[length(energy) - 168 + i] + NN.Forecast$mean[i]
}
Pass.Forecast <- ts(Pass.Forecast, start = 2021, frequency = 24)
# Calculate prediction errors from forecast
NN.error <- validation - Pass.Forecast
validation <- ts(validation[,2], start = 2021, frequency = 24)
# Calculate prediction errors from forecast
NN.error <- validation - Pass.Forecast
# Calculate prediction error statistics (MAE and MAPE)
NN.MAE <- mean(abs(NN.error))
NN.MAPE <- mean(abs(NN.error)/abs(test))*100
# Calculate prediction error statistics (MAE and MAPE)
NN.MAE <- mean(abs(NN.error))
NN.MAPE <- mean(abs(NN.error)/abs(validation))*100
NN.MAE
NN.MAPE
checkresiduals(NN.Model)
checkresiduals(Prof)
Prophet.error <- validation - tail(predict(Prof, forecast.data)$yhat, 168)
# Calculate prediction error statistics (MAE and MAPE)
Prophet.MAE <- mean(abs(Prophet.error$mw))
# Calculate prediction error statistics (MAE and MAPE)
Prophet.MAE <- mean(abs(Prophet.error$mw))
Prophet.MAE <- mean(abs(Prophet.error))
Prophet.MAPE <- mean(abs(Prophet.error)/abs(validation))*100
Prophet.MAE
Prophet.MAPE
NN.error <- validation - Pass.Forecast
# Calculate prediction error statistics (MAE and MAPE)
NN.MAE <- mean(abs(NN.error))
NN.MAPE <- mean(abs(NN.error)/abs(validation))*100
NN.MAE
NN.MAPE
HW <- hw(energy, seasonal = "additive", h = 168)
summary(HW)
HW <- hw(energy, seasonal = "additive", h = 168)
summary(HW)
# Calculate prediction errors from forecast
error=validation-HW$mean
# Calculate prediction error statistics (MAE and MAPE)
MAE=mean(abs(error))
MAPE=mean(abs(error)/abs(validation))
#Plot the forecasts from the holt-winters model
autoplot(HW)+
autolayer(fitted(HW),series="Fitted")+ylab("US Steel Shipments")
# Calculate prediction errors from forecast
error=validation-HW$mean
# code for time series 2 homework 1
# libraries
library(dplyr)
library(ggfortify)
library(lubridate)
library(tseries)
library(forecast)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(ggplot2)
library(seasonalview)
library(aTSA)
library(imputeTS)
library(prophet)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
df2 <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test1.csv")
head(df2)
df3 <- rbind(df,df2)
validation <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test2.csv")
#get rid of useless variables
df3 <- df[,c(1,6)]
validation <- validation[,c(1,6)]
#Change variable to a date time object
df3$datetime_beginning_ept <- mdy_hm(df3$datetime_beginning_ept, tz = Sys.timezone())
validation$datetime_beginning_ept <- mdy_hm(validation$datetime_beginning_ept, tz = Sys.timezone())
#Impute the average of previous and next observation to fix the zeros for DLS
df3[c(5280:5290),]
df3[5283,2] <- 904.2965
df3[c(14180:14190),]
df3[14187,2] <- 844.047
# create time series object
energy <- ts(df3[,2], start = 2019, frequency = 24) # frequency = 24 hours * 365.25 days in a year
HW <- hw(energy, seasonal = "additive", h = 168)
summary(HW)
# Calculate prediction errors from forecast
error=validation-HW$mean
# Calculate prediction errors from forecast
error=validation$mw-HW$mean
# Calculate prediction error statistics (MAE and MAPE)
MAE=mean(abs(error))
MAPE=mean(abs(error)/abs(validation$mw))
MAE
MAPE
Prophet.error <- validation$mw - tail(predict(Prof, forecast.data)$yhat, 168)
# Calculate prediction error statistics (MAE and MAPE)
Prophet.MAE <- mean(abs(Prophet.error))
Prophet.MAPE <- mean(abs(Prophet.error)/abs(validation$mw))*100
Prophet.MAE
Prophet.MAPE
# Calculate prediction errors from forecast
NN.error <- validation_ts - Pass.Forecast
validation_ts <- ts(validation[,2], start = 2022, frequency = 24)
# Calculate prediction errors from forecast
NN.error <- validation_ts - Pass.Forecast
# Calculate prediction error statistics (MAE and MAPE)
NN.MAE <- mean(abs(NN.error))
NN.MAPE <- mean(abs(NN.error)/abs(validation_ts))*100
NN.MAE
NN.MAPE
Prophet.error <- validation$mw - tail(predict(Prof, forecast.data)$yhat, 168)
# Calculate prediction error statistics (MAE and MAPE)
Prophet.MAE <- mean(abs(Prophet.error))
Prophet.MAPE <- mean(abs(Prophet.error)/abs(validation$mw))*100
Prophet.MAE
Prophet.MAPE
View(validation)
View(validation)
View(validation)
test <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test3.csv")
test <- test[,c(1,6)]
test$datetime_beginning_ept <- mdy_hm(test$datetime_beginning_ept, tz = Sys.timezone())
new_val <- rbind(df3, validation)
##Test
prophet.data.test <- data.frame(ds = new_val$datetime_beginning_ept, y = new_val$mw)
Prof.test <- prophet()
Prof.test <- add_country_holidays(Prof, "US")
prophet.data.test <- data.frame(ds = new_val$datetime_beginning_ept, y = new_val$mw)
Prof.test <- prophet()
Prof.test <- add_country_holidays(Prof, "US")
prophet.data.test <- data.frame(ds = new_val$datetime_beginning_ept, y = new_val$mw)
Prof.test <- prophet()
Prof.test <- add_country_holidays(Prof.test, "US")
Prof.test <- add_seasonality(Prof.test, name='monthly', period=30.5, fourier.order=6)
Prof.test <- fit.prophet(Prof.test, prophet.data.test)
prof.test
forecast.data.test <- make_future_dataframe(Prof.test, periods = 168, freq = 'hour')
# Calculate prediction errors from forecast
Prophet.error.test <- test$mw - tail(predict(Prof.test, forecast.data.test)$yhat, 168)
# Calculate prediction error statistics (MAE and MAPE)
Prophet.MAE.test <- mean(abs(Prophet.error))
Prophet.MAPE.test <- mean(abs(Prophet.error)/abs(test$mw))*100
Prophet.MAE.test
Prophet.MAPE.test
energy.test <- ts(new_val[,2], start = 2019, frequency = 24)
### Test
NN.Model.test <- nnetar(diff(energy.test, 24), p = 1, P = 2)
NN.Forecast.test <- forecast::forecast(NN.Model.test.test, h = 168)
NN.Forecast.test <- forecast::forecast(NN.Model.test, h = 168)
Pass.Forecast.test <- rep(NA, 168)
for(i in 1:168){
Pass.Forecast.test[i] <- energy.test[length(energy.test) - 168 + i] + NN.Forecast.test$mean[i]
}
Pass.Forecast.test <- ts(Pass.Forecast.test, start = 2022, frequency = 24)
test_ts <- ts(test[,2], start = 2022, frequency = 24)
# Calculate prediction errors from forecast
NN.error.test <- test_ts - Pass.Forecast.test
# Calculate prediction error statistics (MAE and MAPE)
NN.MAE.test <- mean(abs(NN.error.test))
NN.MAPE.test <- mean(abs(NN.error.test)/abs(test_ts))*100
NN.MAE.test
NN.MAPE.test
energy.test <- ts(new_val[,2], start = 2019, frequency = 24)
#Create the holt winter's model
HW <- hw(energy.test, seasonal = "additive", h = 168)
#Create the holt winter's model
HW <- hw(energy, seasonal = "additive", h = 168)
HW.test <- hw(energy, seasonal = "additive", h = 168)
# Calculate prediction errors from forecast
error.test=test$mw-HW.test$mean
# Calculate prediction error statistics (MAE and MAPE)
MAE.test=mean(abs(error))
MAPE.test=mean(abs(error)/abs(test$mw))
MAE.test
MAPE.test
HW.test <- hw(energy, seasonal = "additive", h = 168)
# Calculate prediction errors from forecast
error.test=test$mw-HW.test$mean
# Calculate prediction error statistics (MAE and MAPE)
MAE.test=mean(abs(error.test))
MAPE.test=mean(abs(error.test)/abs(test$mw))
MAE.test
MAPE.test
#Create the holt winter's model
HW <- hw(energy, seasonal = "additive", h = 168)
summary(HW)
# Calculate prediction errors from forecast
error=validation$mw-HW$mean
# Calculate prediction error statistics (MAE and MAPE)
MAE=mean(abs(error))
MAPE=mean(abs(error)/abs(validation$mw))
MAE
MAPE
# code for time series 2 homework 1
# libraries
library(dplyr)
library(ggfortify)
library(lubridate)
library(tseries)
library(forecast)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(ggplot2)
library(seasonalview)
library(aTSA)
library(imputeTS)
library(prophet)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
df2 <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test1.csv")
head(df2)
df3 <- rbind(df,df2)
validation <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test2.csv")
test <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test3.csv")
#get rid of useless variables
df3 <- df[,c(1,6)]
validation <- validation[,c(1,6)]
test <- test[,c(1,6)]
new_val <- rbind(df3, validation)
#Change variable to a date time object
df3$datetime_beginning_ept <- mdy_hm(df3$datetime_beginning_ept, tz = Sys.timezone())
validation$datetime_beginning_ept <- mdy_hm(validation$datetime_beginning_ept, tz = Sys.timezone())
new_val$datetime_beginning_ept <- mdy_hm(new_val$datetime_beginning_ept, tz = Sys.timezone())
test$datetime_beginning_ept <- mdy_hm(test$datetime_beginning_ept, tz = Sys.timezone())
#Impute the average of previous and next observation to fix the zeros for DLS
df3[c(5280:5290),]
df3[5283,2] <- 904.2965
df3[c(14180:14190),]
df3[14187,2] <- 844.047
# create time series object
energy <- ts(df3[,2], start = 2019, frequency = 24) # frequency = 24 hours * 365.25 days in a year
energy.test <- ts(new_val[,2], start = 2019, frequency = 24)
#Create the holt winter's model
HW <- hw(energy, seasonal = "multiplicative", h = 168)
#summary(HW)
# Calculate prediction errors from forecast
error=validation$mw-HW$mean
# Calculate prediction error statistics (MAE and MAPE)
MAE=mean(abs(error))
MAPE=mean(abs(error)/abs(validation$mw))
MAE
MAPE
#Forcasted vs Actuals Graph
#make validation only datetime vector
tseq_val_week <- seq.POSIXt(from = as.POSIXct("2022-09-30 00:00:00", tz = "EST"), length.out = 168, by = "hours")
tseq_val_week <- c(tseq_val_week, tseq_val_week)
tseq_val_week <- sort(tseq_val_week)
#long dataset with actual/predicted for plotting later
add_model_df_val <- data.frame(cbind(validation$mw, HW$mean))
colnames(add_model_df_val) <- c("actual", "predicted")
add_model_df_val <- add_model_df_val %>% pivot_longer(c(actual, predicted))
code for time series 2 homework 1
# code for time series 2 homework 1
# libraries
library(dplyr)
library(ggfortify)
library(lubridate)
library(tseries)
library(forecast)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(ggplot2)
library(seasonalview)
library(aTSA)
library(imputeTS)
library(prophet)
# libraries
library(tidyverse)
#Create the holt winter's model
HW <- hw(energy, seasonal = "multiplicative", h = 168)
#summary(HW)
# Calculate prediction errors from forecast
error=validation$mw-HW$mean
# Calculate prediction error statistics (MAE and MAPE)
MAE=mean(abs(error))
MAPE=mean(abs(error)/abs(validation$mw))
MAE
MAPE
#Forcasted vs Actuals Graph
#make validation only datetime vector
tseq_val_week <- seq.POSIXt(from = as.POSIXct("2022-09-30 00:00:00", tz = "EST"), length.out = 168, by = "hours")
tseq_val_week <- c(tseq_val_week, tseq_val_week)
tseq_val_week <- sort(tseq_val_week)
#long dataset with actual/predicted for plotting later
add_model_df_val <- data.frame(cbind(validation$mw, HW$mean))
colnames(add_model_df_val) <- c("actual", "predicted")
add_model_df_val <- add_model_df_val %>% pivot_longer(c(actual, predicted))
#actual vs predicted data only over validation period
ggplot(data = add_model_df_val, aes(x = tseq_val_week, y = value, color = factor(name))) +
scale_x_datetime(date_labels = "%m/%d/%Y") + geom_line() +
scale_color_manual(values = c("#648fff", "#ffb000"), labels = c("Actual", "Predicted")) +
labs(x = "Time", y = "Energy (megawatts)", title = "Actual vs Additive HW Forecast for 9/30/22-10/06/22", color = "Data")
#test
HW.test <- hw(energy, seasonal = "multiplicative", h = 168)
# Calculate prediction errors from forecast
error.test=test$mw-HW.test$mean
# Calculate prediction error statistics (MAE and MAPE)
MAE.test=mean(abs(error.test))
MAPE.test=mean(abs(error.test)/abs(test$mw))
MAE.test
MAPE.test
#Forcasted vs Actuals Graph
#make test only datetime vector
tseq_test_week <- seq.POSIXt(from = as.POSIXct("2022-10-07 00:00:00", tz = "EST"), length.out = 168, by = "hours")
tseq_test_week <- c(tseq_test_week, tseq_test_week)
tseq_test_week <- sort(tseq_test_week)
#long dataset with actual/predicted for plotting later
add_model_df_test <- data.frame(cbind(test$mw, HW.test$mean))
colnames(add_model_df_test) <- c("actual", "predicted")
add_model_df_test <- add_model_df_test %>% pivot_longer(c(actual, predicted))
#actual vs predicted data only over test period
ggplot(data = add_model_df_test, aes(x = tseq_test_week, y = value, color = factor(name))) +
scale_x_datetime(date_labels = "%m/%d/%Y") + geom_line() +
scale_color_manual(values = c("#648fff", "#ffb000"), labels = c("Actual", "Predicted")) +
labs(x = "Time", y = "Energy (megawatts)", title = "Actual vs Additive HW Forecast for 10/07/22-10/14/22", color = "Data")
##############################################################
# Prophet
prophet.data <- data.frame(ds = df3$datetime_beginning_ept, y = df3$mw)
Prof <- prophet()
Prof <- add_country_holidays(Prof, "US")
Prof <- add_seasonality(Prof, name='monthly', period=30.5, fourier.order=6)
Prof <- fit.prophet(Prof, prophet.data)
Prof
forecast.data <- make_future_dataframe(Prof, periods = 168, freq = 'hour')
#plot(Prof, predict(Prof, forecast.data))
# Calculate prediction errors from forecast
Prophet.error <- validation$mw - tail(predict(Prof, forecast.data)$yhat, 168)
# Calculate prediction error statistics (MAE and MAPE)
Prophet.MAE <- mean(abs(Prophet.error))
Prophet.MAPE <- mean(abs(Prophet.error)/abs(validation$mw))*100
Prophet.MAE
Prophet.MAPE
#Forcasted vs Actuals Graph
#long dataset with actual/predicted for plotting later
proph_model_df_val <- data.frame(cbind(validation$mw, tail(predict(Prof, forecast.data)$yhat, 168)))
# libraries
library(tidyverse)
library(dplyr)
library(ggfortify)
library(lubridate)
library(tseries)
library(forecast)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(ggplot2)
library(seasonalview)
library(aTSA)
library(imputeTS)
library(prophet)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
df2 <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test1.csv")
head(df2)
df3 <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test2.csv")
head(df3)
df4 <- rbind(df,df2, df3)
View(df4)
validation <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test3.csv")
test <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test4.csv")
#get rid of useless variables
df4 <- df[,c(1,6)]
validation <- validation[,c(1,6)]
test <- test[,c(1,6)]
new_val <- rbind(df4, validation)
#Change variable to a date time object
df4$datetime_beginning_ept <- mdy_hm(df4$datetime_beginning_ept, tz = Sys.timezone())
validation$datetime_beginning_ept <- mdy_hm(validation$datetime_beginning_ept, tz = Sys.timezone())
new_val$datetime_beginning_ept <- mdy_hm(new_val$datetime_beginning_ept, tz = Sys.timezone())
test$datetime_beginning_ept <- mdy_hm(test$datetime_beginning_ept, tz = Sys.timezone())
#Impute the average of previous and next observation to fix the zeros for DLS
df4[c(5280:5290),]
df4[5283,2] <- 904.2965
df4[c(14180:14190),]
df4[14187,2] <- 844.047
# create time series object
energy <- ts(df4[,2], start = 2019, frequency = 24) # frequency = 24 hours * 365.25 days in a year
energy.test <- ts(new_val[,2], start = 2019, frequency = 24)
View(test)
View(validation)
# libraries
library(dplyr)
library(ggfortify)
library(lubridate)
library(tseries)
library(forecast)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(ggplot2)
library(seasonalview)
library(aTSA)
library(imputeTS)
library(prophet)
#load data
df0 <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df0)
#Impute the average of previous and next observation to fix the zeros for DLS
df0[c(5280:5290),]
df0[5283,6] <- 904.2965
df0[c(14180:14190),]
df0[14187,6] <- 844.047
df1 <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test1.csv")
head(df1)
df2<- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test2.csv")
head(df2)
train <- rbind(df0,df1,df2)
validation <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test3.csv")
test <- read.csv("https://github.com/felicitimilne/bluefall2hwteam17/raw/main/hrl_load_metered%20-%20test4.csv")
#get rid of useless variables
train <- train[,c(1,6)]
validation <- validation[,c(1,6)]
test <- test[,c(1,6)]
#Change variable to a date time object
train$datetime_beginning_ept <- mdy_hm(train$datetime_beginning_ept, tz = Sys.timezone())
validation$datetime_beginning_ept <- mdy_hm(validation$datetime_beginning_ept, tz = Sys.timezone())
test$datetime_beginning_ept <- mdy_hm(test$datetime_beginning_ept, tz = Sys.timezone())
#retraining data
new_val <- rbind(train, validation)
new_val$datetime_beginning_ept <- mdy_hm(new_val$datetime_beginning_ept, tz = Sys.timezone())
energy.train <- ts(train[,2], start = 2019, frequency = 24)
energy.val <-ts(new_val[,2], start = 2022, frequency = 24)
energy.test <- ts(test[,2], start = 2022, frequency = 24)
#Create the holt winter's model
HW <- hw(energy.train, seasonal = "multiplicative", h = 168)
#summary(HW)
# Calculate prediction errors from forecast
error=validation$mw-HW$mean
# Calculate prediction error statistics (MAE and MAPE)
MAE=mean(abs(error))
MAPE=mean(abs(error)/abs(validation$mw))*100
MAE
MAPE
#test
HW.test <- hw(energy.test, seasonal = "multiplicative", h = 168)
# Calculate prediction errors from forecast
error.test=test$mw-HW.test$mean
# Calculate prediction error statistics (MAE and MAPE)
MAE.test=mean(abs(error.test))
MAPE.test=mean(abs(error.test)/abs(test$mw))*100
MAE.test
MAPE.test
#test
HW.test <- hw(energy.val, seasonal = "multiplicative", h = 168)
# Calculate prediction errors from forecast
error.test=test$mw-HW.test$mean
# Calculate prediction error statistics (MAE and MAPE)
MAE.test=mean(abs(error.test))
MAPE.test=mean(abs(error.test)/abs(test$mw))*100
MAE.test
MAPE.test
model1222 <- Arima(energy.train, order = c(1,0,2), seasonal = c(2,1,2))
#Test against validation set
#forecast compared to validation for auto model
model1222forecast <- forecast::forecast(model1222, h = 168)
#calculate the error for the model
model1222forecast.error = validation$mw - model1222forecast$mean
#calculate the MAE and MAPE for the model
model1222forecast.MAE = mean(abs(model1222forecast.error))
model1222forecast.MAE
model1222forecast.MAPE=mean(abs(model1222forecast.error)/abs(validation$mw))*100
model1222forecast.MAPE
#retrain hand-picked ARIMA model 1 -> chosen ARIMA to test
model1222_test <- Arima(energy.val, order = c(1,0,2), seasonal = c(2,1,2))
#forecast
model1222forecast_test <- forecast::forecast(model1222_test, h = 168)
#calculate the MAE and MAPE for the test set
model1222forecast_test.error = test$mw - model1222forecast_test$mean
model1222forecast_test.MAE = mean(abs(model1222forecast_test.error))
model1222forecast_test.MAE
model1222forecast_test.MAPE = mean(abs(model1222forecast_test.error)/test$mw)*100
model1222forecast_test.MAPE
