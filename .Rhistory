unique.meats.df <- unique.meats.df[1:length(unique(wideorder$meat)),]
unique.meats.df.lift <- order.rules.meat.df.lift[match(unique(order.rules.meat.df.lift$lhs), order.rules.meat.df.lift$lhs),]
unique.meats.df.lift <- unique.meats.df.lift[1:length(unique(wideorder$meat)),]
#Plot results
plot(order.rules.meat.df)
plot(unique.meats.df)
plot(unique.meats.df.lift)
# plot(order.rules.fm)
#
# order.rules.bs <- trans.order %>% apriori(parameter = list(supp = 0.01, conf = 0.25, target = "rules"), appearance = list(default = "lhs", rhs = "Blackstone Merlot")) %>% sort(by = "confidence", decreasing = TRUE)
# bs_plot <- plot(order.rules.bs)
# libraries
library(dplyr)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%Y")
head(df)
View(df)
View(df)
library(dplyr)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%Y")
head(df)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%YY")
head(df)
# libraries
library(dplyr)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#roll up hourly data into daily
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise(max(mw)) %>%
summarise(mean(mw)) %>%
summarise(min(mw))
#roll up hourly data into daily
rolled_df <- df %>%
group_by(df$datetime_beginning_ept) %>%
summarise(max(df$mw)) %>%
summarise(mean(df$mw)) %>%
summarise(min(df$mw))
rolled_df <- df %>%
group_by(df$datetime_beginning_ept) %>%
summarise(mean(df$mw))
View(rolled_df)
View(rolled_df)
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise(mean(mw))
View(rolled_df)
View(rolled_df)
View(df)
View(df)
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise(max(mw))
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise(mean(mw)) %>%
summarise(max(mw))
#roll up hourly data into daily
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise_at(vars(mw),  list(min, max, mean))
#rename columns
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_mean"
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_max"
#rename columns
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
View(rolled_df)
View(rolled_df)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column and drop the hours
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#roll up hourly data into daily
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise_at(vars(mw),  list(min, mean, max))
#rename columns
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
View(rolled_df)
View(rolled_df)
View(rolled_df)
View(rolled_df)
#create time series object
MegaWatt_mean <- ts(rolled_df$mw_mean, start = 2019, frequency = 7)
autoplot(MegaWatt_mean)+labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
# libraries
library(dplyr)
library(forecast)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column and drop hours
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#roll up hourly data into daily and drop unnecessary columns
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise_at(vars(mw),  list(min, mean, max))
#rename columns
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
#create time series object
MegaWatt_mean <- ts(rolled_df$mw_mean, start = 2019, frequency = 7)
autoplot(MegaWatt_mean)+labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
# libraries
library(dplyr)
library(ggplot2)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column and drop hours
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#roll up hourly data into daily and drop unnecessary columns
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise_at(vars(mw),  list(min, mean, max))
#rename columns
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
#create time series object
MegaWatt_mean <- ts(rolled_df$mw_mean, start = 2019, frequency = 7)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
#create time series object
MegaWatt_mean <- ts(rolled_df$mw_mean, start = c(2019,7), frequency = 12)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
#create time series object
MegaWatt_mean <- ts(rolled_df$mw_mean, start = c(2019,1), frequency = 12)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
#create time series object
MegaWatt_mean <- ts(rolled_df$mw_mean, start = c(2019,1), frequency = 2)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
#create time series object
MegaWatt_mean <- ts(rolled_df$mw_mean, start = c(2019,1), frequency = 48)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
#create time series object
MegaWatt_mean <- ts(rolled_df$mw_mean, start = c(2019,12), frequency = 12)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
#create time series object
MegaWatt_mean <- ts(rolled_df$mw_mean, start = c(2019,7), frequency = 12)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
View(rolled_df)
View(rolled_df)
#create time series object
MegaWatt_mean <- ts(rolled_df$mw_mean, start = 2019-08-01, end = 2022-09-22, frequency = 12)
MegaWatt_mean <- ts(rolled_df$mw_mean, start = 2019, end = 2022, frequency = 12)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
MegaWatt_mean <- ts(rolled_df$mw_mean, start = 2019, frequency = 12)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
MegaWatt_mean <- ts(rolled_df$mw_mean, start = 8/1/2019, frequency = 12)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
MegaWatt_mean <- ts(rolled_df$mw_mean, start = 8/1/2019, end = 9/1/2022, frequency = 12)
#create time series object
MegaWatt_mean <- ts(rolled_df$mw_mean, start = c(2019, 8), frequency = 12)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
## Using July 1954 as start date:
gnp <- ts(cumsum(1 + round(rnorm(100), 2)),
start = c(1954, 7), frequency = 12)
plot(gnp) # using 'plot.ts' for time-series plot
MegaWatt_mean <- ts(rolled_df$mw_mean, start = c(2019, 8), frequency = 12)
plot(MegaWatt_mean)
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = c(2019, 8), frequency = 12)
plot(MegaWatt_mean)
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = c(2019, 1), frequency = 12)
plot(MegaWatt_mean)
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = c(2019, 1), frequency = 7)
plot(MegaWatt_mean)
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = c(2019, 1), frequency = 36)
plot(MegaWatt_mean)
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = c(2019, 8), frequency = 36)
plot(MegaWatt_mean)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x="Date",y="Megawatts")
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", y="Megawatts") +
scale_x_continuous(x="Date", limits = c(2019-08-01, 2022-09-22))
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", y="Megawatts") +
scale_x_continuous("Date", limits = c(2019-08-01, 2022-09-22))
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", y="Megawatts") +
scale_x_continuous("Date", limits = c(9/2022, 8/2019))
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", y="Megawatts") +
scale_x_continuous("Date", limits = c(8/2019, 9/2022))
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", y="Megawatts") +
scale_x_continuous("Date", limits = c(8/1/2019, 9/1/2022))
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = 2019, frequency = 36)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", y="Megawatts") +
scale_x_continuous("Date", limits = c(8/1/2019, 9/1/2022))
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = 2019, frequency = 36)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", y="Megawatts") +
scale_x_date(limit=c(as.Date("2019-08-01"),as.Date("2022-09-22")))
# libraries
library(dplyr)
library(ggplot2)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column and drop hours
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#roll up hourly data into daily and drop unnecessary columns
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise_at(vars(mw),  list(min, mean, max))
#rename columns
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = 2019, frequency = 36)
autoplot(MegaWatt_mean) +
scale_x_date(limit=c(as.Date("2019-08-01"),as.Date("2022-09-22"))) +
labs(title="Time Series plot for Enegry Usage", y="Megawatts")
head(MegaWatt_mean)
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = 2019, frequency = 12)
autoplot(MegaWatt_mean) +
scale_x_date(limit=c(as.Date("2019-08-01"),as.Date("2022-09-22"))) +
labs(title="Time Series plot for Enegry Usage", y="Megawatts")
head(MegaWatt_mean)
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = c(2019, 8), end = c(2022, 9), frequency = 12)
autoplot(MegaWatt_mean) +
scale_x_date(limit=c(as.Date("2019-08-01"),as.Date("2022-09-22"))) +
labs(title="Time Series plot for Enegry Usage", y="Megawatts")
head(MegaWatt_mean)
MegaWatt_mean
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts")
# libraries
library(dplyr)
library(ggplot2)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column and drop hours
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#roll up hourly data into daily and drop unnecessary columns
rolled_df <- df %>%
group_by(datetime_beginning_ept)
#%>%
#  summarise_at(vars(mw),  list(min, mean, max))
#rename columns
#colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
#colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
#colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
#create time series object
MegaWatt <- ts(data = rolled_df$mw, start = c(2019, 8), end = c(2022, 9), frequency = 12)
autoplot(MegaWatt) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts")
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#roll up hourly data into daily and drop unnecessary columns
rolled_df <- df %>%
group_by(datetime_beginning_ept)
#%>%
#  summarise_at(vars(mw),  list(min, mean, max))
#rename columns
#colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
#colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
#colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
#create time series object
MegaWatt <- ts(data = df$mw, start = c(2019, 8), end = c(2022, 9), frequency = 12)
autoplot(MegaWatt) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts")
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#roll up hourly data into daily and drop unnecessary columns
rolled_df <- df %>%
group_by(datetime_beginning_ept)
#%>%
#  summarise_at(vars(mw),  list(min, mean, max))
#rename columns
#colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
#colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
#colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
#create time series object
MegaWatt <- ts(data = df$mw, start = c(2019, 8), end = c(2022, 9), frequency = 12)
autoplot(MegaWatt) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts")
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column and drop hours
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#create time series object
MegaWatt <- ts(data = df$mw, start = c(2019, 8), end = c(2022, 9), frequency = 12)
autoplot(MegaWatt) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts")
#roll up hourly data into daily and drop unnecessary columns
rolled_df <- df %>%
group_by(datetime_beginning_ept)
#create time series object
MegaWatt <- ts(data = rolled_df$mw, start = c(2019, 8), end = c(2022, 9), frequency = 12)
autoplot(MegaWatt) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts")
#create time series object
MegaWatt <- ts(data = rolled_df$mw, start = c(2019, 8), frequency = 12)
autoplot(MegaWatt) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts")
#roll up hourly data into daily and drop unnecessary columns
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise_at(vars(mw),  list(min, mean, max))
#rename columns
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw, start = c(2019, 8), frequency = 12)
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = c(2019, 8), frequency = 12)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts")
ggbld <- ggplot_build(g)
g<-autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts")
ggbld$layout$coord$labels(ggbld$layout$panel_params)[[1]]$x.labels
ggbld <- ggplot_build(g)
ggbld$layout$coord$labels(ggbld$layout$panel_params)[[1]]$x.major_source
ggbld <- ggplot_build(g)
ggbld$panel$ranges[[1]]$x.major_source
ggbld$panel$ranges[[1]]$y.major_source
g
View(ggbld)
View(ggbld)
ggbld$data[[1]]$y.major_source
ggbld$data[[1]]$x
# libraries
library(dplyr)
library(ggplot2)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column and drop hours
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#roll up hourly data into daily and drop unnecessary columns
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise_at(vars(mw),  list(min, mean, max))
#rename columns
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = c(2019, 8), frequency = 12)
g<-autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts") +
#get current labels
ggbld <- ggplot_build(g)
g<-autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts") +
#get current labels
ggbld <- ggplot_build(g)
gplt <- autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts") +
#get current labels
ggbld <- ggplot_build(gplt)
gplt = autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts") +
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts") +
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts") +
gplt <- autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts")
ggbld <- ggplot_build(gplt)
old_x <- ggbld$data[[1]]$x
old_x
as.DataFrame(old_x)
library(pandas)
save(olx_x,file="old_x.Rda")
save(old_x,file="old_x.Rda")
#get current labels
old_x <- load(old_x.Rda)
#get current labels
old_x <- load("old_x.Rda")
load("G:/My Drive/MSA/GitHub/bluefall2hwteam17/old_x.Rda")
# libraries
library(dplyr)
library(ggplot2)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column and drop hours
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#roll up hourly data into daily and drop unnecessary columns
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise_at(vars(mw),  list(min, mean, max))
#rename columns
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = c(2019, 8), frequency = 12)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts") +
#get current labels
old_x <- load("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/old_x.Rda")
# libraries
library(dplyr)
library(ggplot2)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column and drop hours
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#roll up hourly data into daily and drop unnecessary columns
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise_at(vars(mw),  list(min, mean, max))
#rename columns
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = c(2019, 8), frequency = 12)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts") +
#get current labels
old_x <- load("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/old_x.Rda")
#get current labels
old_x <- load("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/raw/main/old_x.Rda")
#get current labels
old_x <- load("G:/My Drive/MSA/GitHub/bluefall2hwteam17/old_x.Rda")
load("G:/My Drive/MSA/GitHub/bluefall2hwteam17/old_x.Rda")
dim(old_x)
length(old_x)
gplt <- autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts") +
ggbld <- ggplot_build(gplt)
gplt <- autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts") +
ggbld <- ggplot_build(gplt)
ggbld <- ggplot_build(autoplot(MegaWatt_mean))
# libraries
library(dplyr)
library(ggplot2)
#load data
df <- read.csv("https://raw.githubusercontent.com/felicitimilne/bluefall2hwteam17/main/hrl_load_metered.csv")
head(df)
#reformat date column and drop hours
df$datetime_beginning_ept <- as.Date(df$datetime_beginning_ept, "%m/%d/%y")
head(df)
#roll up hourly data into daily and drop unnecessary columns
rolled_df <- df %>%
group_by(datetime_beginning_ept) %>%
summarise_at(vars(mw),  list(min, mean, max))
#rename columns
colnames(rolled_df)[colnames(rolled_df) == "fn1"] = "mw_min"
colnames(rolled_df)[colnames(rolled_df) == "fn2"] = "mw_mean"
colnames(rolled_df)[colnames(rolled_df) == "fn3"] = "mw_max"
#create time series object
MegaWatt_mean <- ts(data = rolled_df$mw_mean, start = c(2019, 8), frequency = 12)
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts") +
#get current labels loaded into my environment (insert tricky stuff here)
ggbld <- ggplot_build(autoplot(MegaWatt_mean))
ggbld <- ggplot_build(autoplot(MegaWatt_mean))
autoplot(MegaWatt_mean) +
labs(title="Time Series plot for Enegry Usage", x = "Date", y="Megawatts")
